<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Segflow</title><link>https://segflow.github.io/post/</link><description>Recent content in Posts on Segflow</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 23 Jun 2025 12:00:00 +0100</lastBuildDate><atom:link href="https://segflow.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>No, you don't need Oh My Zsh</title><link>https://segflow.github.io/post/no-you-dont-need-ohmyzsh/</link><pubDate>Mon, 23 Jun 2025 12:00:00 +0100</pubDate><guid>https://segflow.github.io/post/no-you-dont-need-ohmyzsh/</guid><description>&lt;p>Don&amp;rsquo;t get me wrong – Oh My Zsh is an excellent product. It&amp;rsquo;s well-maintained, feature-rich, and has helped millions of developers enhance their shell experience. But here&amp;rsquo;s the thing: &lt;strong>you don&amp;rsquo;t need it to have a great zsh experience&lt;/strong>.&lt;/p>
&lt;p>When I recently set up a new workstation, I decided to skip Oh My Zsh entirely and configure zsh manually. The result? A lightweight, fast, and fully customized shell that does exactly what I need – nothing more, nothing less.&lt;/p></description></item><item><title>My journey optimizing the Go Compiler</title><link>https://segflow.github.io/post/go-compiler-optimization/</link><pubDate>Tue, 28 Apr 2020 13:20:28 +0100</pubDate><guid>https://segflow.github.io/post/go-compiler-optimization/</guid><description>&lt;p>At &lt;a href="https://edge.network/">EDGE&lt;/a> we write a lot of Go, and we love it for various reasons, one of them being speed. One day I got into a situation where I need to assign an &lt;code>int&lt;/code> to a variable based on another string value.&lt;/p>
&lt;p>Sounds easy right? well yes, but this particular use case awakened the beast in me and made me think what&amp;rsquo;s the &lt;strong>best&lt;/strong> way to do it.&lt;/p>
&lt;p>The journey finished by me contributing to the language compiler and make &lt;code>map&lt;/code> lookups faster.&lt;/p></description></item><item><title>Noxale CTF: Grocery List (pwn)</title><link>https://segflow.github.io/post/noxale-ctf-grocery_list/</link><pubDate>Sun, 09 Sep 2018 19:21:10 +0100</pubDate><guid>https://segflow.github.io/post/noxale-ctf-grocery_list/</guid><description>&lt;p>In this challenge, we are given a service IP and PORT, to which we can connect using &lt;code>netcat&lt;/code> or any similar tool.
We are also provided with an &lt;code>ELF&lt;/code> file.&lt;/p></description></item><item><title>PlaidCTF: Shop (pwn)</title><link>https://segflow.github.io/post/plaid-ctf-shop/</link><pubDate>Sun, 06 May 2018 20:17:33 +0100</pubDate><guid>https://segflow.github.io/post/plaid-ctf-shop/</guid><description>&lt;p>Below, you will find the full exploit for PlaidCTF pwn200 task. The full write-up will follow.&lt;/p></description></item><item><title>AceBear CTF: Secure login (reverse)</title><link>https://segflow.github.io/post/acebear-ctf-secure_login/</link><pubDate>Tue, 30 Jan 2018 21:12:11 +0100</pubDate><guid>https://segflow.github.io/post/acebear-ctf-secure_login/</guid><description>&lt;p>In this article I will share with you the solution to &lt;code>Secure Login&lt;/code> challenge presented at &lt;em>Acebear CTF&lt;/em>, this task was worth 900 points. Even though I did not manage to solve the challenge on time, I still enjoyed it a lot.&lt;/p></description></item><item><title>34C3 CTF: GiftWrapper 2 (pwn)</title><link>https://segflow.github.io/post/34c3-ctf-giftwrapper2/</link><pubDate>Sun, 21 Jan 2018 09:21:10 +0100</pubDate><guid>https://segflow.github.io/post/34c3-ctf-giftwrapper2/</guid><description>&lt;p>In this challenge, we are given a service IP and PORT, to which we can connect using &lt;code>netcat&lt;/code> or any similar tool. We are also provided with a &lt;code>tar&lt;/code> file that contains the service binary and some &lt;code>.so&lt;/code> modules.&lt;/p></description></item><item><title>3DS CTF: Xesar (crypto)</title><link>https://segflow.github.io/post/3ds-ctf-xesar/</link><pubDate>Sat, 30 Dec 2017 13:20:47 +0100</pubDate><guid>https://segflow.github.io/post/3ds-ctf-xesar/</guid><description>&lt;p>Recently I decided to start playing CTFs again, and since I needed some training before playing a real one, I decided to take a look at some recent CTFs in &lt;a href="https://ctftime.org/">CTFtime.org&lt;/a>.&lt;/p>
&lt;p>And then I found this crypto task with no write-up for it yet, and that&amp;rsquo;s why I jumped into it :)&lt;/p></description></item></channel></rss>